name: CI

on:
  push:
    branches:
      - develop
      - master
      - release/*
      - trunk/*

  pull_request:
    branches:
      - develop
      - master
      - release/*
      - trunk/*
      - veriblock-pop-integration


jobs:
  linux-native:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: Release
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date --utc +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: linux-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            linux-ccache-
      - name: get version for veriblock-pop-cpp
        run: echo "VERIBLOCK_POP_CPP_VERSION=$(awk -F '=' '/\$\(package\)_version/{print $NF}' $PWD/depends/packages/veriblock-pop-cpp.mk | head -n1)" >> $GITHUB_ENV
      - name: veriblock-pop-cpp release version
        run: echo Using veriblock-pop-cpp version $VERIBLOCK_POP_CPP_VERSION
      - name: install apt-get deps
        run: |
          sudo apt-get update
          sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 ccache
          sudo apt-get install qt5-default libevent-dev python3-zmq python3-dev libboost-python-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libminiupnpc-dev libzmq3-dev libdb5.3-dev libdb5.3++-dev
      - name: install veriblock-pop-cpp
        run: |
          pip3 install wheel
          sudo su;
          cd /opt;
          wget https://github.com/VeriBlock/alt-integration-cpp/archive/${VERIBLOCK_POP_CPP_VERSION}.tar.gz;
          tar -xf ${VERIBLOCK_POP_CPP_VERSION}.tar.gz;
          cd alt-integration-cpp-${VERIBLOCK_POP_CPP_VERSION};
          python3 setup.py install
          python3 setup.py test
          rm -rf build
          mkdir build;
          cd build;
          cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DTESTING=OFF -DWITH_PYPOPTOOLS=ON;
          make -j2;
          sudo make install
      - name: install jemalloc
        run: |
          cd /opt
          git clone -b 5.2.1 https://github.com/jemalloc/jemalloc.git
          cd jemalloc
          ./autogen.sh
          make -j
          sudo make install
      - name: cmake
        run: cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=install -DBUILD_BITCOIN_QT=OFF
      - name: make
        run: cmake --build build -- -j2 install
      - name: create artifacts
        if: success()
        run: |
          mv ./install BitcoinABC-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
          tar czvf BitcoinABC-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-linux-x64.tar.gz BitcoinABC-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}/
      - name: upload artifacts
        if: success()
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ARTIFACT_HOST }}
          username: ${{ secrets.ARTIFACT_USER }}
          key: ${{ secrets.ARTIFACT_KEY }}
          passphrase: ${{ secrets.ARTIFACT_KEY_PASSPHRASE }}
          source: BitcoinABC-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-linux-x64.tar.gz
          target: ${{ secrets.ARTIFACT_PATH }}
      - name: make check
        timeout-minutes: 60
        run: |
          cd build;
          make check
      - name: upload logs
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-suite
          path: src/test-suite.log
      - name: run functional tests
        if: always()
        timeout-minutes: 60
        env:
          BITCOIND: '/home/runner/work/pop-bch/pop-bch/build/src/bitcoind'
        run: python3 test/functional/test_runner.py
      - name: run pop integration tests
        if: always()
        timeout-minutes: 60
        env:
          VBITCOIND_PATH: './build/src/bitcoind'
        run: python3 test/integration/test_runner.py